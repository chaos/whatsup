'libnodeupdown' regression test suite
-------------------------------------

I. INTRODUCTION

Ganglia and the ganglia library is developed outside of LLNL.
Subsequently, when significant changes are made to ganglia or the
ganglia library, the nodeupdown library may have to be updated.

This test suite should be used to ensure that any changes made to the
nodeupdown library remain consistent from release to release.

II. REQUIREMENTS

In order to run this test suite, the following are needed.

    1) three test nodes
    2) 'genders' installed on each test node
    3) 'ganglia' (and thus the 'gmond' ganglia server) installed on
       each test node
    2) 'pdsh' installed on atleast one of the test nodes
    3) 'pkill' installed on the same node as 'pdsh'


III. HOW TO RUN THE TESTSUITE

Step 1)

Modify the libnodeupdown_test.conf file appropriately.  It should list
the following (in order) on each line:

    1) the location of 'pdsh' 
        - i.e. /usr/bin/pdsh
    2) the location of 'pkill' 
        - i.e. /usr/bin/pkill
    3) the location of 'gmond' 
        - i.e. /usr/sbin/gmond
    4) location of libnodeupdown_test_gmond.conf
       - i.e. /home/achu/test/libnodeupdown_test_gmond.conf
       - if libnodeupdown_test_gmond.conf is not located in an NFS
         mounted location, the file must be distributed to the 
         same directory on each of the test nodes
    5) test node #1 hostname
    6) test node #2 hostname
    7) test node #3 hostname
    8) test node #1 alternate name
    9) test node #2 alternate name
    10) test node #3 alternate name

    There must be 3 test nodes listed in the configuration file, no more, 
    and no less.  If there are no alternate names for the three test nodes,
    simply use the same node names that were originally listed. 

Step 2)

Compile the test suite with 'make'.  

Step 3)

su to 'root'.  The test suite must be run as root because the test suite
uses 'pdsh' and 'pkill'.

Step 4)

Run the test suite with 'libnodeupdown_test' from the first node listed
in the configuration file.
 
IV. BUGS

The libnodeupdown testsuite tests the functionality of libnodeupdown
by closing and starting gmond ganglia server daemons on the listed
test nodes.  This is done to simulate a set of nodes to be up or down.

Due to the constant closing and restarting of gmond servers, it is
possible for nodeupdown_load_data() to fail connecting to a server or
for functionality tests to fail if the gmond servers have not had time
to re-establish and re-synchronize themselves after being restarted.
Pauses have been put within the test suite to give the gmonds daemons
time to re-establish themselves.  However, there is always the
possibility the timeouts may be long enough.  If a
nodeupdown_load_data() connection error occurs during the test suite,
simply try again.
 
In addition, there is a known bug in libganglia.  If you constantly
call libganglia to connect to a gmond server, libganglia can return
status information that no nodes are up and no nodes are down, even
though they are obviously up or down.  This is only an issue when the
library is called multiple times within the same process (such as this
test suite) and not when it is called once (such as in the 'whatsup'
command).  If this bug pops up, and you suddenly get test cases
failing because of empty lists of nodes, try commenting out test cases
and eliminating the number of times libganglia must be called within
the test suite.  A set of test cases has already been commented out in
the libnodeupdown_testcases.h file.

V.  SPECIAL NOTES

Currently, the longest pause in the test suite will be 90 seconds.  So
don't give up if the test suite looks like it is hung.  

The test suite is not an extremely thorough test suite.  Many test
situations have not been hit.  But it hits a lot of the situations.

VI.  Future Development

Print out more info than the test index number.  Currently, its hard
to determine exactly which tests failed and why it failed.

There are some test situations that have not been tested yet by the
testsuite.  Time permitting, make the test suite more thorough.
