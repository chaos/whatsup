\."#############################################################################
\."$Id: nodeupdown_module.3,v 1.1 2005-05-10 06:02:30 achu Exp $
\."#############################################################################
\."  Copyright (C) 2003 The Regents of the University of California.
\."  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).
\."  Written by Albert Chu <chu11@llnl.gov>
\."  UCRL-CODE-155699
\."  
\."  This file is part of Whatsup, tools and libraries for determining up and
\."  down nodes in a cluster.  For details, see http://www.llnl.gov/linux/.
\."
\."  Whatsup is free software; you can redistribute it and/or modify it under
\."  the terms of the GNU General Public License as published by the Free
\."  Software Foundation; either version 2 of the License, or (at your option)
\."  any later version.
\."  
\."  Whatsup is distributed in the hope that it will be useful, but WITHOUT 
\."  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
\."  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License 
\."  for more details.
\."  
\."  You should have received a copy of the GNU General Public License along
\."  with Whatsup; if not, write to the Free Software Foundation, Inc.,
\."  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
\."############################################################################
.\"
.TH LIBNODEUPDOWN 3 "May 2005" "LLNL" "LIBNODEUPDOWN"
.SH NAME
Introduction to writing nodeupdown modules
or down
.SH SYNOPSIS
.B #include <nodeupdown.h>
.sp
.B #include <nodeupdown/nodeupdown_backend_module.h>
.sp
.B #include <nodeupdown/nodeupdown_clusterlist_module.h>
.sp
.B #include <nodeupdown/nodeupdown_config.h>
.sp
.B #include <nodeupdown/nodeupdown_config_module.h>
.sp
.B #include <nodeupdown/nodeupdown_devel.h>
.sp
.br
.SH BACKEND MODULES

A nodeupdown backend module of the name 'foobar' can be written by
compiling a shared object library with the filename
nodeupdown_backend_foobar.so, and installing it in the nodeupdown
package library directory @NODEUPDOWN_MODULE_DIR@.

The backend module should define and export the symbol to a structure
named 'nodeupdown_backend_module_info'.  This structure is of the
following type:

.nf
struct nodeupdown_backend_module_info {
.in +2
char *backend_module_name;
Nodeupdown_backend_default_hostname default_hostname;
Nodeupdown_backend_default_port default_port;
Nodeupdown_backend_default_timeout_len default_timeout_len;
Nodeupdown_backend_setup setup;
Nodeupdown_backend_cleanup cleanup;
Nodeupdown_backend_get_updown_data get_updown_data;
.in -2
};
.fi

The field 'backend_module_name' indicates the name of the backend module.

The field 'default_hostname' is a pointer to a function of the following type:

typedef char *(*Nodeupdown_backend_default_hostname)(nodeupdown_t);

'default_hostname' returns a pointer to a string for the default hostname for this backend module.

The field 'default_port' is a pointer to a function of the following type:

typedef int (*Nodeupdown_backend_default_port)(nodeupdown_t);

'default_port' returns the default port for this backend module.

The field 'default_timeout_len' is a pointer to a function of the following type:

typedef int (*Nodeupdown_backend_default_timeout_len)(nodeupdown_t);

'default_timeout_len' returns the default timeout_len for this backend module.

The field 'setup' is a pointer to a function of the following type:

typedef int (*Nodeupdown_backend_setup)(nodeupdown_t);

'setup' sets up the backend module with whatever initialization is necessary. 
It returns 0 on success, -1 on error.

The field 'cleanup' is a pointer to a function of the following type:

typedef int (*Nodeupdown_backend_cleanup)(nodeupdown_t);

'cleanup' cleans up the backend module from earlier initializations.  
It returns 0 on success, -1 on error.

The field 'get_updown_data' is a pointer to a function of the following type:

typedef int (*Nodeupdown_backend_get_updown_data)(nodeupdown_t, const char *, unsigned int, unsigned int, char *);

'get_updown_data' retrieves all updown data from the backend technology and 
stores it in the nodeupdown_t handle.  It is passed a hostname, port,
timeout_len, and reserved fields similar to
.BR nodeupdown_load_data(3).
If values were passed to
.BR nodeupdown_load_data(3), 
they are forwarded on to 'get_updown_data'.  However, if defaults were
passed to
.BR nodeupdown_load_data(3)
the appropriate values have already been read and compauted from
configuration modules, configuration files, or the above backend
default functions.

As mentioned above, the 'get_updown_function' must store up and down
nodes into the nodeupdown_t handle.  They can be placed into the handle using the
.BR nodeupdown_add_up_node(3)
.BR nodeupdown_add_down_node(3)
.BR nodeupdown_add_up_nodes(3)
and
.BR nodeupdown_add_down_nodes(3)
functions.

All of the above functions must be defined in the module and listed in
the 'nodeupdown_backend_module_info' structure.

.SH CLUSTERLIST MODULES
.SH CONFIG MODULES
.SH FILES
/usr/include/nodeupdown.h
.SH SEE ALSO
